<apex:page controller="ALTF.PlanOverview_Controller">
     <apex:remoteObjects >

        <apex:remoteObjectModel name="ALTF__Account_Plan__c" 
            jsShorthand="AccountPlan" 
            fields="
                Id,
                Name
            "
        >
            <apex:remoteObjectField name="OwnerId" jsShorthand="Owner"/>
            <apex:remoteObjectField name="ALTF__Updated__c" jsShorthand="Updated"/>
            <apex:remoteObjectField name="ALTF__Updated_By__c" jsShorthand="UpdatedBy"/>
            <apex:remoteObjectField name="CreatedDate" jsShorthand="Created"/> 
            
        </apex:remoteObjectModel>

        <apex:remoteObjectModel name="User" jsShorthand="Owner" fields="Id, Name, Title">
        </apex:remoteObjectModel>

        <apex:remoteObjectModel name="ALTF__Account_Plan_Team_Member__c" jsShorthand="Member"
            fields="
                Id
            "
        >
            <apex:remoteObjectField name="ALTF__Account_Plan__c" jsShorthand="Plan"/>
            <apex:remoteObjectField name="ALTF__User__c" jsShorthand="User"/>
            <apex:remoteObjectField name="ALTF__Last_Accessed_Date__c" jsShorthand="LastAccessedDate"/>
            <apex:remoteObjectField name="ALTF__Is_Plan_Owner__c" jsShorthand="PlanOwner"/>
            
        </apex:remoteObjectModel>

        <apex:remoteObjectModel name="ALTF__Account_Plan_Revenue_Target__c" 
            jsShorthand="RevenueTarget" 
            fields="
                Id
            "
        >
            <apex:remoteObjectField name="ALTF__Start_Date__c" jsShorthand="StartDate"/>
            <apex:remoteObjectField name="ALTF__End_Date__c" jsShorthand="EndDate"/>
            <apex:remoteObjectField name="ALTF__Revenue_Target__c" jsShorthand="Target"/>
            <apex:remoteObjectField name="ALTF__Account_Plan__c" jsShorthand="Plan"/>
            
        </apex:remoteObjectModel>

     </apex:remoteObjects>

    <apex:include pageName="ALTF__acc_mgmt_objectives_app_remote_objects"/>

    <script type="text/javascript">
        
    'use strict';

    angular
        .module('acc_mgmt__plan_data_remote', [ 'ttg.VfRemoting' ])
        .constant('ListOfAccessibleAccountIds', {! listOfAccessibleAccountIds })
        .factory(
            'RemoteObjects', 
            [
                '$q', 'jqDateFormat', 'VFRemoting', 'Labels', 'ListOfAccessibleAccountIds',
                function($q, jqDateFormat, VFRemoting, Labels, ListOfAccessibleAccountIds) {

                    var planSummaryData = {
                        teamActivityValue : 70,
                        teamActivityLabel : '70%',
                        planStageValue : 'Implementation',
                        planStageLabel : 'Implementation',
                        planReviewDateLabel: '2016-01-01'
                    };

                    function getPlanSummaryData(planId) {

                        var defer = $q.defer();

                        var plan = new SObjectModel.AccountPlan();
                        ttg.ttgQATracker.callStarted();
                        plan.retrieve(
                        { 
                            limit: 100,
                            where: {
                                Id: {eq: planId}
                            }
                        }, 
                        function(err, records) {
                            ttg.ttgQATracker.callEnded();
                            if (err) {
                                defer.reject(err);
                            } else {
                                if(!(records && records.length > 0)) {
                                    defer.reject('No record exists for record id ' + planId);
                                } else {
                                    var accountplan = records[0];                                  
                                    var userids = _.uniq([
                                                        records[0].get('Owner'), 
                                                        records[0].get('UpdatedBy') 
                                                    ]);
                                    var owner = new SObjectModel.Owner();

                                    owner.retrieve(
                                        {
                                            limit: 100,
                                            where: {
                                                Id: {
                                                    in: userids
                                                }
                                            }
                                        },
                                        function(err, records) {
                                            var contacts = {};
                                            _.each(records, function(contact) {
                                                contacts[contact.get('Id')] = contact;
                                            })
                                            planSummaryData.planOwnerId =
                                                accountplan.get('Owner');
                                            planSummaryData.lastUpdatedByValue = 
                                                accountplan.get('UpdatedBy');
                                            planSummaryData.lastUpdatedByLabel = '-';
                                            if(contacts[accountplan.get('UpdatedBy')] != undefined){
                                                planSummaryData.lastUpdatedByLabel = (
                                                    accountplan.get('UpdatedBy') ? 
                                                       contacts[accountplan.get('UpdatedBy')].get('Name') :
                                                       ''
                                                );
                                            }

                                            planSummaryData.planOwnerName = '-';
                                            if(contacts[accountplan.get('Owner')] != undefined){
                                                planSummaryData.planOwnerName = 
                                                    contacts[accountplan.get('Owner')].get('Name');
                                            }

                                            var lastUpdated = accountplan.get('Updated');
                                            planSummaryData.lastUpdatedLabel = jQuery.datepicker.formatDate( 
                                                jqDateFormat,
                                                lastUpdated
                                            );
                                            planSummaryData.lastUpdatedValue = lastUpdated ? moment(lastUpdated).valueOf() : '';
                                            console.log('planSummaryData.lastUpdated Label = ' + planSummaryData.lastUpdatedLabel + ', Value = ' + planSummaryData.lastUpdatedValue);

                                            planSummaryData.lastScorecardBatchRun =
                                                accountplan.get('LastScorecardRunDate');
                                            var planReviewDate = new Date();
                                            planSummaryData.planReviewDateLabel = 
                                                jQuery.datepicker.formatDate( jqDateFormat, planReviewDate );

                                            var created = accountplan.get('Created');
                                            planSummaryData.created = created;    

                                            defer.resolve(planSummaryData);
                                        }
                                    );   
                                }
                            }
                        }
                        );
                        return defer.promise;
                    }

                    function getPlanUnitAggregateData(planId) {
                        function adapt(result) {
                            result = result.plan.totalData;

                            var byunits = _.groupBy(result, 'unitId');
                            result = _.values(
                                _.map(
                                    byunits,
                                    function(value, key) {
                                        return _.reduce(
                                            value,
                                            function(memo, aggdata) {
                                                if('Current' === aggdata.opportunityType) {
                                                    memo.currentCountValue += aggdata.oppcount;
                                                    memo.currentValue += aggdata.total;
                                                } else if('Won' === aggdata.opportunityType) {
                                                    memo.wonCountValue += aggdata.oppcount;
                                                    memo.wonValue += aggdata.total;
                                                } else if('Potential' === aggdata.opportunityType){
                                                    memo.potentialCountValue += aggdata.oppcount;
                                                    memo.potentialValue += aggdata.total;
                                                }
                                                return memo;
                                            },
                                            {
                                                unitId: key,
                                                potentialCountValue: 0,
                                                currentCountValue: 0,
                                                wonCountValue: 0,
                                                potentialValue: 0,
                                                currentValue: 0,
                                                wonValue: 0
                                            }
                                        );
                                    }
                                )
                            );

                            return result;
                        }

                        var deferred = $q.defer();
                        VFRemoting.invoke(
                            '{!$RemoteAction.PlanOverview_Controller.getSummaryAggregateData}',
                            [planId],
                            function(result, event)
                            {
                                if (event.type == 'exception') { 
                                    deferred.reject(result);
                                } else {
                                    deferred.resolve(adapt(result));
                                }
                            }
                        );
                        return deferred.promise;
                    }

                    function getLastActiveValue(lastactive) {
                        var today = moment.utc({
                            h    :0, 
                            m    :0, 
                            s    :0, 
                            ms   :0}
                        );


                        var val, label;
                        if(lastactive) {
                            console.log('lastactive = ' + lastactive);
                            console.log('today = ' + today.format());
                            
                            lastactive = moment(lastactive).utc();
                            /*new Date(
                                            lastactive.getTime() 
                                            + (lastactive.getTimezoneOffset() * 60000)
                                        );*/
                            
                            console.log('lastactive TMZ = ' + lastactive);
                            console.log('lastactive = ' + lastactive.format());
                            var diff = 
                                today
                                .diff(lastactive, 'days');
                            
                            console.log('diff = ' + diff);
                            switch(diff) {
                                case 0:
                                    label = Labels.COMMON_TODAY;
                                    break;
                                case 1:
                                    label = Labels.COMMON_ONE_DAY;
                                    break;
                                default:
                                    label = diff + ' '+Labels.COMMON_DAYS;
                            }

                            val = diff;
                        } else {
                            label = '-';
                        }

                        return {
                            label: label,
                            value: val
                        }
                    }

                    function getTeamMembersData(planId) {
                        function adapt(teammembers, contactsById) {

                            return _.map(teammembers, function(teammember) {
                                var lastactive = getLastActiveValue(teammember.get('LastAccessedDate'));
                                var contact = contactsById[teammember.get('User')];
                                var contactName = '-';
                                var contactTitle = '-';
                                if(contact != undefined){
                                    contactName = contact.get('Name');
                                    contactTitle = contact.get('Title');
                                }
                                return {
                                    lastActiveLabel: lastactive.label,
                                    lastActiveValue: lastactive.value,
                                    name: contactName,
                                    title: contactTitle
                                }
                            });
                        }

                        var deferred = $q.defer();
                        var planmembers = new SObjectModel.Member();
                        ttg.ttgQATracker.callStarted();
                        planmembers.retrieve(
                            { 
                                limit: 100,
                                where: {
                                    'Plan': {eq: planId}
                                }
                            },
                            function(err, records) {
                                ttg.ttgQATracker.callEnded();
                                if (err) {
                                    deferred.reject(err);
                                } else {

                                    var userids = _.map(records, function(rec) {
                                        return rec.get('User')
                                    });
                                    var owner = new SObjectModel.Owner();
                                    owner.retrieve(
                                        {
                                            limit: 100,
                                            where: {
                                                Id: {
                                                    in: userids
                                                }
                                            }
                                        },
                                        function(err, contacts) {
                                            var contactsById = {};
                                            _.each(contacts, function(contact) {
                                                contactsById[contact.get('Id')] = contact;
                                            })
                                            var team = _.sortBy(
                                                adapt(records, contactsById),
                                                'lastActiveValue'
                                            );

                                            deferred.resolve(team);
                                        }
                                    ); 
                                }
                            }
                        );

                        return deferred.promise;
                    }


                    function getScorecardData(planId) {
                        function adapt(scorecarddata) {
                            return _.map(scorecarddata, function(scorecard) {
                                return {
                                    dateValue: scorecard.get('Date'),
                                    currentValue: scorecard.get('CurrentOpps'),
                                    wonValue: scorecard.get('WonOpps'),
                                    potentialValue: scorecard.get('PotentialOpps')
                                }
                            });
                        }

                        var deferred = $q.defer();

                        var scores = new SObjectModel.Scores();
                        ttg.ttgQATracker.callStarted();
                        scores.retrieve(
                            { 
                                limit: 100,
                                where: {
                                    'Plan': {eq: planId}
                                },
                                orderby: [ {Date: 'ASC NULLS FIRST'} ]
                            },
                            function(err, records) {
                                ttg.ttgQATracker.callEnded();
                                if (err) {
                                    deferred.reject(err);
                                } else {
                                    console.log('>>> SCORECARD Records = ' + records.length);
                                    
                                    deferred.resolve(adapt(records));
                                }
                            }
                        );

                        return deferred.promise;
                    }

                    function getRevenueTargets(planId) {
                        function adapt(targets) {
                            return _.map(targets, function(target) {
                                var adaptedTarget = {
                                    endDateValue: target.get('EndDate'),
                                    dateValue: target.get('StartDate'),
                                    targetValue: target.get('Target')
                                };
                                console.log('getRevenueTargets(): adaptedTarget = ' + JSON.stringify(adaptedTarget));
                                
                                return adaptedTarget;
                            });
                        }

                        var deferred = $q.defer();

                        var targets = new SObjectModel.RevenueTarget();
                        ttg.ttgQATracker.callStarted();
                        targets.retrieve(
                            { 
                                limit: 100,
                                where: {
                                    'Plan': {eq: planId}
                                },
                                orderby: [ {StartDate: 'ASC'} ]
                            },
                            function(err, records) {
                                ttg.ttgQATracker.callEnded();
                                if (err) {
                                    deferred.reject(err);
                                } else {
                                    deferred.resolve(adapt(records));
                                }
                            }
                        );

                        return deferred.promise;
                    }

                    return {
                        getPlanSummaryData : getPlanSummaryData,
                        getPlanUnitAggregateData: getPlanUnitAggregateData,
                        getTeamMembersData : getTeamMembersData,
                        getScorecardData: getScorecardData,
                        getRevenueTargets: getRevenueTargets
                    }
                }
            ]
        );

    </script>
</apex:page>