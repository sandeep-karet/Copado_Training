<apex:page controller="GBLite.GridSelector" sidebar="false" action="{!init}" showHeader="true" title="{!lang.AllGridsTitle}" tabStyle="All_Grids__tab">
    <apex:stylesheet value="{!URLFOR($Resource.GBLite__gb_resources, 'gb-jq-min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.GBLite__gb_resources, 'icomoon/icomoon.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.GBLite__gb_resources, 'gbw-min.css')}"/>
    <style type="text/css">
        /*override*/
        body .bPageFooter {display:none;}
        .outerNoSidebar {padding-bottom:0 !important;}
    </style>
    <apex:form styleClass="gbAppPage gbAllGrids gb{!lang.langCode}">
        <c:EmptyComponent id="noGridMsg" rendered="{!NOT(gridsExist)}">
            <div id="pageWarnings" class="msgBox infoMsg instr"><apex:outputText value="{!lang.AllGridsNoGridsMsg}" escape="false"/>
            </div>
        </c:EmptyComponent> 
        
        <c:EmptyComponent id="GridSelector" rendered="{!gridsExist}">
            <table class="grSlctr" width="100%" border="0" cellpadding="0" cellspacing="0">
                <tr>
                    <td align="left" valign="middle" class="searchGrids">
                        <span class="search-wrapper">
                            <input type="text" id="searchBox" autocomplete="off"></input>
                            <span class="placeholder">{!lang.AllGridsSearchLbl}</span>
                            <span class="arrow"></span>
                            <div id="searchresult" class="searchresult boxShadow {!isFolders}">
                                <ul id="gridFolderList">
                                    <!--there is no max size limit on lists in Apex, but there
                                        is a limit on apex repeat. We just need to have multiple
                                        lists with multiple apex repeats-->
                                    <apex:repeat value="{!gridFolderList.0StringList}" var="gridFolder">
                                        <li class="{!gridFolder[0]}" itemid="{!gridFolder[1]}"><span class="{!gridFolder[2]}"></span><span class="value">{!gridFolder[3]}</span></li>
                                    </apex:repeat>
                                    <apex:repeat value="{!gridFolderList.1StringList}" var="gridFolder">
                                        <li class="{!gridFolder[0]}" itemid="{!gridFolder[1]}"><span class="{!gridFolder[2]}"></span><span class="value">{!gridFolder[3]}</span></li>
                                    </apex:repeat>
                                    <apex:repeat value="{!gridFolderList.2StringList}" var="gridFolder">
                                        <li class="{!gridFolder[0]}" itemid="{!gridFolder[1]}"><span class="{!gridFolder[2]}"></span><span class="value">{!gridFolder[3]}</span></li>
                                    </apex:repeat>
                                </ul>
                                <ul id="searchList">
                                    <apex:repeat value="{!searchList.0String}" var="grid">
                                        <li><span class="valueToSearch none">{!grid}</span><span class="valueToDisplay"></span></li>
                                    </apex:repeat>
                                    <apex:repeat value="{!searchList.1String}" var="grid">
                                        <li><span class="valueToSearch none">{!grid}</span><span class="valueToDisplay"></span></li>
                                    </apex:repeat>
                                   <apex:repeat value="{!searchList.2String}" var="grid">
                                        <li><span class="valueToSearch none">{!grid}</span><span class="valueToDisplay"></span></li>
                                    </apex:repeat>
                                </ul>
                                <div class="nomatch">{!lang.NoMatchesFoundTxt}</div>
                                 <div class="nogrid">{!lang.NoAccessToGridsMsg}</div>
                            </div>
                        </span>
                        &nbsp;&nbsp;<span class="none gbLoading">{!lang.LoadTxt}</span>
                    </td>
                    <td align="right" valign="middle">
                        <span class="none spanLink">{!lang.AllGridsLinkTxt}</span>
                    </td>
                </tr>
            </table>
            
            <!-- this javascript must come before the iframe -->
            <script type="text/javascript" src="{!URLFOR($Resource.gb_resources, 'jquery/jquery-min.js')}"></script>
            <script type="text/javascript">
                var jq = jQuery.noConflict();
            </script>
            
            <!-- pass the isdtp param to the grid URLs if its value is 'nv' or 'vw', which happens in the Service and Sales Consoles 
                this param indicates certain behavior in the grid when in the Console context, like opening records in
                the console tabs instead of new windows; we don't want to pass the isdtp param if its value is 'p1', 
                which means we're in Lightning or Salesforce1
            -->
            <apex:variable var="fullGridURL" value="{!URLFOR(baseRelativeURLForVFManaged + 'Grid')}" />
                                    
            <c:ServiceCloudConsoleComponent inServiceCloudConsole="{!inConsole}"/>
            
            <script type="text/javascript">         
                var desktopView;
                var allGridsUrl = window.location.href.toLowerCase();
                var inLightningConsoleApp = getParamValue('ilca');
                
                if (allGridsUrl.indexOf("desktopview=1") > -1) {
                    desktopView = true;
                } else {
                    desktopView = false;
                }
            
                // this will not show the searchbox as selected onload
                function setFocusOnLoad() {} 
                
                jq(document).ready(function(){
                    var searchbox = jq('#searchBox');
                    
                    jq(window).resize(function() {
                        resizeGridFrame();
                    });
                    
                    jq('span.spanLink').click(function() {
                        var gridUrl = jq('#gridFrame').attr('src');
                        if (gridUrl.length > 0) {
				        	if (inLightningConsoleApp == '1') {
				        		var lightningOrigin = getParamValue('lexo');
				       			var destinationOrigin = decodeURIComponent(lightningOrigin);
				        		var gridName = getParamValue('gname', gridUrl);
				        		var urlParams = '&ilca=1&itp=1&lexo=' + lightningOrigin
				        	    
						        // post message to GridBuddyGrids lightning component
						        parent.postMessage({gridName: gridName, urlParams: urlParams}, destinationOrigin);
				        	} else {
	                            // remove the sh and ssb params
	                            gridUrl = gridUrl.replace('&sh=0', '');
	                            gridUrl = gridUrl.replace('&ssb=0', '');
	                            
	                            GBWindowsUtil.openWindow(gridUrl);
	                        }
	                	}
                    });
                    //when user types into search box, update the search results
                    searchbox.keyup(function(){
                        var ghostTxt = jq('span.placeholder');
                        var userinput = jq(this).val();
                        userinput=='' ? ghostTxt.show() : ghostTxt.hide();
                        showResultList(userinput);              
                    });
                    //on click on search field, hide the placeholder, if field had a value, show the results for that
                    jq('#searchBox, span.placeholder').click(function(){
                        var searchBox = jq('#searchBox');
                        jq('span.placeholder').hide();
                        searchBox.focus();
                        var userinput = searchBox.val();
                        if(userinput){
                            showResultList(userinput);
                        }
                        else{
                            var gridFolderList = jq('#gridFolderList');
                            gridFolderList.show();
                            jq('#searchList').hide();
                            jq('div.nomatch').hide();
                            jq('li',gridFolderList).length > 0? jq('div.nogrid').hide() : jq('div.nogrid').show();  
                            jq('#searchresult').show();
                        }
                    });
                    //reset the placeholder when clicking out of search field and it is empty
                    searchbox.blur(function(){
                        if(jq(this).val()==''){
                            jq('span.placeholder').show();
                        }
                    });
                    //select the value of search field on focus
                    searchbox.focus(function() {
                        jq(this).select();
                    });
                    //select the value of search field on focus (Safari, Chrome)
                    searchbox.mouseup(function() {
                        jq(this).select();
                    });
                    //when user clicks down arrow, show/hide all the grids and folders
                    jq('span.search-wrapper .arrow').click(function(){
                        var dropdown = jq('#searchresult');
                        if(dropdown.css('display')!='none'){
                            dropdown.hide();
                        }
                        else{
                            var gridFolderList = jq('#gridFolderList');
                            gridFolderList.show();
                            jq('#searchList').hide();
                            jq('div.nomatch').hide();
                            jq('li',gridFolderList).length > 0? jq('div.nogrid').hide() : jq('div.nogrid').show();  
                            dropdown.show();                             
                        }
                    });
                    //when user clicks out, hide the grid list
                    jq('html').click(function(event){
                        var dropdown = jq('#searchresult');
                        if(dropdown.css('display')!='none'){
                            var element=jq(event.target);
                            var dropdownPar = element.parents('#searchresult');
                            if(element.attr('id')!='searchBox' && !element.hasClass('placeholder') && !element.hasClass('arrow') && (dropdownPar == undefined || dropdownPar.length == 0)){
                                dropdown.hide();
                            }
                        }
                    }); 
                    //on mouseout, hide the grid list
                    jq('#searchresult').mouseleave(function(){
                        jq(this).hide();
                    });
                    //when user clicks on grid name in grid-folder list, load the grid
                    jq('li.item-grid, li.item-grid .value').click(function(){
                        var value;
                        var element = jq(this);
                        element.hasClass('item-grid') ? value = element.find('.value').html() : value = element.html();
                        loadGrid(value);
                    });
                     //when user clicks on grid name in search result list, load the grid
                    jq('li, span, strong', jq('#searchList')).click(function(){
                        var value;
                        var element = jq(this);
                        this.nodeName.toLowerCase() == 'li' ? value = element.find('.valueToSearch').html() : value = element.parent().find('.valueToSearch').html();
                        loadGrid(value);
                    });
                    //when user clicks on plus/minus icon, show/hide grids under folder name
                    jq('span.toggle').click(function(){
                        var element = jq(this);
                        var id = element.parent().attr('itemid');                 
                        jq('li.item-grid[itemid='+id+']').toggle();
                        element.hasClass('expanded') ? element.removeClass('expanded').addClass('collapsed') : element.removeClass('collapsed').addClass('expanded');
                    });
                    
                    if (jq.browser.msie==true) {
                        jq('.frameScrollFix').removeClass('frameScrollFix');
                    }
                    
                    // load the first grid
                    loadFirstGrid();
                    
                    // disable autocomplete at the form level (MS Edge seems to not respect autocomplete="off" at the input level)
                    jq('.gbAllGrids').attr('autocomplete', 'off');

                    initFavoriteGrids();
                });

                function initFavoriteGrids(){
                    var favoriteGridsCookie = getCookie('favoriteGrids');
                    if(!favoriteGridsCookie) favoriteGridsCookie = '[]';
                    var favoriteGridsList = JSON.parse(favoriteGridsCookie);
                    FavoriteGrid.updateFavoriteGridsList(favoriteGridsList);
                }

                var FavoriteGrid = (function(window, document, jq) {
                    function updateFavoriteGridsList(favoriteGridsList){
                        var gridsList = jq('div.searchresult #gridFolderList');
                        if(gridsList.length == 0) return;
                        jq('li[itemid="0"]').remove();
                        var cleanFavoriteGrids = _checkFavoriteGridsAgainstAllGridsList(favoriteGridsList);
                        if(favoriteGridsList.length == 0 || cleanFavoriteGrids.length == 0){
                            // no favorite grids, just skip rest of the logic
                            return;
                        }
                        favoriteGridsList = cleanFavoriteGrids;
                        favoriteFolderMarkup = '<li id="favoriteFolder" class="item-folder" itemid="0"><span class="toggle expanded"></span><span class="value">Favorites</span><span class="favoriteGridIconList icon-star1"></span></li>';
                        for(var i = 0; i < favoriteGridsList.length; i++){
                            favoriteFolderMarkup += '<li class="item-grid" itemid="0"><span class="none"></span><span class="value">'+favoriteGridsList[i]+'</span></li>';
                        }

                        gridsList.prepend(favoriteFolderMarkup);
                        // set click handler for all newly added grid items
                        jq('li.item-grid[itemid="0"], li.item-grid[itemid="0"] .value').click(function(){
                            var value;
                            var element = jq(this);
                            element.hasClass('item-grid') ? value = element.find('.value').html() : value = element.html();
                            loadGrid(value);
                        });
                     }

                    function _checkFavoriteGridsAgainstAllGridsList(favoriteGridsList) {
                        var cleanFavoriteGrids = [],
                            allGridNames = [];
                            allGrids = jq('li.item-grid span.value');
                        
                        // loop through each li tag selected above
                        jq.each(allGrids, function() {
                            allGridNames.push(jq(this).text());
                        });


                        for(var i = 0; i < favoriteGridsList.length; i++){
                            var favoriteGrid = favoriteGridsList[i];
                            if (allGridNames.indexOf(favoriteGrid) != -1) {
                                cleanFavoriteGrids.push(favoriteGrid);
                            }
                        }
                        setCookie('favoriteGrids', JSON.stringify(cleanFavoriteGrids));   

                        return cleanFavoriteGrids;
                    }

                    function getCookie(cname) {
                        var name = cname + "=";
                        var decodedCookie = decodeURIComponent(document.cookie);
                        var ca = decodedCookie.split(';');
                        for(var i = 0; i <ca.length; i++) {
                          var c = ca[i];
                          while (c.charAt(0) == ' ') {
                            c = c.substring(1);
                          }
                          if (c.indexOf(name) == 0) {
                            return c.substring(name.length, c.length);
                          }
                        }
                        return "";
                    }

                    function setCookie(cname, cvalue) {
                        document.cookie = cname + "=" + cvalue + ";";
                    }

                    return {
                        updateFavoriteGridsList: updateFavoriteGridsList
                    };
                })(window, document, jq); // end FavoriteGrid

                
                function loadFirstGrid() {
                    var firstGrid = jq('li.item-grid:first');
                    if (firstGrid.length > 0) {
                        firstGrid.click();
                    }
                }
                
                function loadGrid(value){
                    var searchBox = jq('#searchBox');
                    searchBox.val(value);
                    jq('span.placeholder').hide();
                    jq('#searchresult').hide();
                    jq('span.gbLoading').removeClass('none');
                    jq('span.spanLink').addClass('none');
                    jq('#gridFrame').attr('src', getGridURLwithParams(searchBox.val()));
                }
                
                function getGridURLwithParams(gridName) {
                    var gridURLwithParams = '{!fullGridURL}';
                    
                    if ( {!NOT(inConsole)} ) {
                        // remove the isdtp param if present, it would have been added when calling the URLFOR VF function for fullGridURL
                        if (gridURLwithParams.indexOf('isdtp=p1') > -1) {
                            gridURLwithParams = gridURLwithParams.replace('isdtp=p1', ''); 
                        }
                    }
                    
                    if (gridURLwithParams.indexOf('?') < 0) {
                        gridURLwithParams += '?';
                    } else {
                        gridURLwithParams += '&';
                    }
                    gridURLwithParams += 'gname=' + gridName + '&sh=0&ssb=0';
                    
                    if (desktopView == true) {
                        gridURLwithParams += '&desktopView=1';
                    }
                    
		        	if (inLightningConsoleApp == '1') {
		        		var lightningOrigin = getParamValue('lexo');
		        	    gridURLwithParams += '&ilca=1&itp=1';
		        	    gridURLwithParams += '&lexo=' + lightningOrigin;
		        	}
                    
                    return gridURLwithParams; 
                }
                
                function getParamValue(paramName, strToCheck) {
			        var params = strToCheck || window.location.search,
			            paramValue = '';
			        
			        if (params) {
			            var paramArray = params.split('&');
			            
			            jq.each(paramArray, function(i, item) {
			                if (item.match(paramName + '=')) {
			                    paramValue = item.substring(item.indexOf('=') + 1);     
			                    return false;
			                }
			            })
			        };
			        return paramValue;
			    }
                
                function resizeGridFrame() {
                    var gridFrame = jq('#gridFrame'),
                        winHeight = jq(window).height(),
                        gridFrameHeight,
                        winHeightMin = 400,
                        sfTabHeader = jq('#AppBodyHeader'),
                        allGridsHeader = jq('table.grSlctr'),
                        motifCurve = jq('#motifCurve'),
                        bottomCurve = jq('#bd_b'),
                        commHeader = jq('.globalHeaderBar');
                    
                    // calculate new height and width
                    if (winHeight < winHeightMin) {
                        winHeight = winHeightMin;
                    }
                    
                    var sfTabHeight = (sfTabHeader.length > 0) ? sfTabHeader.height() : 0,
                        motifCurveHeight = (motifCurve.length > 0) ? motifCurve.height() : 0,
                        bottomCurveHeight = (bottomCurve.length > 0) ? bottomCurve.height() : 0,
                        commHeaderHeight = (commHeader.length > 0) ? commHeader.height() : 0,
                        sfBottomPadding = 45;
                        
                    gridFrameHeight = winHeight - sfTabHeight - motifCurveHeight - allGridsHeader.height() - bottomCurveHeight - commHeaderHeight - sfBottomPadding;
                    gridFrame.attr('height', gridFrameHeight);
                    
                    // set the height on the div to retain the same height after changing grids
                    jq('#resizeDiv').css('height', gridFrameHeight+'px');
                }
                
                function gridFrameLoaded() {
                    resizeGridFrame();      
                    // set the focus on the grid
                    var doc = jq('#gridFrame').contents();
                    if (doc) {
                        doc.find('input.refreshBtn:first').focus().blur();
                    }
                    jq('span.gbLoading').addClass('none');
                    if (jq('#gridFrame').attr('src') && jq('#gridFrame').attr('src').length > 0) {
                        // show link
                        jq('span.spanLink').removeClass('none');
                    }
                }
                //when user types in search field, show the matching grids in a list
                function showResultList(input){
                    var dropdown = jq('#searchresult');
                    jq('#gridFolderList').hide();
                    jq('div.nogrid').hide();
                    var searchList = jq('#searchList');
                    var length = input.length;
                    if(length>0){
                        var arr = jq('li', searchList);
                        var nomatchTxt = jq('div.nomatch');
                        jq.each(arr, function(i,item){
                            var current = jq(item);
                            var valueToSearch = jq('.valueToSearch', item).html();
                            var displayDiv = jq('.valueToDisplay', item);
                            var firstMatchIndex = valueToSearch.toLowerCase().indexOf(input.toLowerCase());
                            
                            if (firstMatchIndex > -1) {
                                current.show();
                                var textToHighLight = valueToSearch.substring(firstMatchIndex,firstMatchIndex+length),
                                    textParts = [];
                                
                                if (firstMatchIndex > 0) {
                                    // add the leading characters before the matched text
                                    textParts.push(valueToSearch.substring(0, firstMatchIndex));
                                }
                                
                                // add the matched text
                                textParts.push('<strong>' + valueToSearch.substring(firstMatchIndex, firstMatchIndex+length) + '</strong>');
                                
                                // add the trailing characters after the matched text
                                textParts.push(valueToSearch.substring(firstMatchIndex+length));
                                displayDiv.html(textParts.join(''));
                            } else {
                                current.hide();
                            }
                        });
                        searchList.show();
                        dropdown.show();
                        jq('li:visible', searchList).length > 0 ? nomatchTxt.hide() : nomatchTxt.show();
                    }
                    else{
                        dropdown.hide();
                    }
                }
            </script>
            
            <div id="resizeDiv" class="frameScrollFix">
                <iframe src="" id="gridFrame" scrolling="auto" height="300" width="100%" frameborder="0" onload="gridFrameLoaded()"></iframe>
             </div>
        </c:EmptyComponent>
    </apex:form>
</apex:page>