<!-- 
    Apttus Content Integration
    PublishContent
     
    @2010-2020 Apttus Inc. All rights reserved.

 -->
 <apex:page standardController="Apttus__APTS_Agreement__c" 
            extensions="Apttus_Content.QueryParamController,Apttus.QueryParamController"  
            showHeader="true" 
            sidebar="true" >
    
    <apex:includeScript value="/soap/ajax/23.0/connection.js" />
    <apex:includeScript value="/soap/ajax/23.0/apex.js" />
    <apex:includeScript value="{!$Resource.Apttus__ComplyJSLib}" />
    <apex:includeScript value="{!$Resource.Apttus_Content__ContentJSLib}" />
    <apex:includeScript value="/support/console/46.0/integration.js"/>

    <apex:stylesheet value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/assets/skins/sam/skin.css')}" />
 
    <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/yahoo-dom-event/yahoo-dom-event.js')}" />
    <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/dragdrop/dragdrop-min.js')}" />
    <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/container/container-min.js')}" />
    <apex:includescript value="{!URLFOR($Resource.Apttus__YUILibrary, '/yui/build/animation/animation-min.js')}" />
    
    <apex:variable var="isLightningUI" value="{!$User.UIThemeDisplayed == 'Theme4d' || $User.UIThemeDisplayed == 'Theme4t'}"  />

    <script>
    
        // Create a namespace for our custom functions
        YAHOO.namespace("force.com");
        
        // wait panel
        
        /**
         * Builds the wait panel.
         */
        YAHOO.force.com.buildWaitPanel = function() {
            document.body.className = document.body.className + " yui-skin-sam";
            YAHOO.force.com.waitPanel = new YAHOO.widget.Panel(
                "waitPanel",  // The id of our dialog container
                { 
                        width           :   "300px", // You can play with this until it's right
                        visible         :   false,   // Should be invisible when rendered
                        draggable       :   false,   // Make the dialog draggable
                        close           :   false,   // Don't include a close title button
                        modal           :   true,    // Make it modal
                        fixedCenter     :   true,    // Keep centered if window is scrolled
                        zindex          :   40,      // Make sure it's on top of everything
                        constraintoviewport: true,
                        
                        // This line adds the appear/disapper fade effect
                        effect          :   {effect:YAHOO.widget.ContainerEffect.FADE,duration:0.25}
                                    
                }
            );
            
            // header
            YAHOO.force.com.waitPanel.setHeader("{!$Label.Apttus__ActivatingAgreement}");
            // set image
            YAHOO.force.com.waitPanel.setBody('<center><img src="{!URLFOR($Resource.Apttus__Image_LoadingPage)}" /></center>');
            // Render the dialog to the document.body level of the DOM
            YAHOO.force.com.waitPanel.render(document.body);
            
        }
        
        // Function called when the DOM is ready to create the dialog,
        // render the dialog into the document body, add our dialog skin
        // css to the body tag, and wire up the buttons on our dialog   
        YAHOO.force.com.onDOMReady = function() {
            
            // build the wait panel
            YAHOO.force.com.buildWaitPanel();
            // show modal panel
            YAHOO.force.com.waitPanel.show();
            // post activate
            afterActivate();
            
        }
        
        // build the tree as soon as the DOM is in a usable state
        YAHOO.util.Event.onDOMReady(YAHOO.force.com.onDOMReady);    
        
    </script>
    
    <script type="text/javascript">
        
        /**
         * Initializes the call
         */
        function initCall() {
        
            try {
                sforce.connection.sessionId = "{!$Api.Session_ID}"; //to avoid session timeout
            } catch(e) {
                erroralert(cERROR_UNKNOWN,e);
                
            }
        
        }
        
        function openActivationAsyncModal() {
            var divActivationMessage = document.getElementById('divActivationMessage');
            divActivationMessage.style.display = 'block';
        }

        function redirectBackToAgreement() {
            sforce.one.navigateToURL('{!URLFOR($Action.Apttus__APTS_Agreement__c.View, Apttus__APTS_Agreement__c.Id)}');
        }

        /**
         * Callback invoked after an agreement is activated
         */
        function afterActivate() {
            
            // perform the post activation process
            // get the agreement id
            var agreementId = "{!Id}";
                
            try {
                
                // STEP I - initialize the call
                initCall();
        
                // STEP II - Create content versions
                // get the comma separated list of searchable document ids
                var docIdStr = "{!JSENCODE(DocumentIdsCsv)}";
                var hasLargeFile = "{!JSENCODE(hasLargeFile)}";
                var asyncId = "{!JSENCODE(asyncId)}";
                var previousStatusCategory = "{!JSENCODE(PreviousStatusCategory)}";
                var previousStatus = "{!JSENCODE(PreviousStatus)}";

                if (docIdStr != null && docIdStr.length > 0) {
                    // publish each attachment to content
                    var docIds = docIdStr.split(",");
                    // get the content workspace
                    var workspaceName = cn_selectContentWorkspaceForAgreement(agreementId);
                    // get the tagcsv value 
                    var tagValues = cn_getAgreementTagFieldValues(agreementId);

                    if(hasLargeFile == 'true') {
                        // create the publish request
                        var request =  new sforce.Xml("PublishRequest");
                        request.FileIds = docIds;
                        request.WorkspaceName = workspaceName;
                        request.TagValues = tagValues;

                        // prepare request for large file
                        cn_prepareXAJSRequestForLargeFiles(agreementId, previousStatusCategory, previousStatus, asyncId, request);
                    } else {
                        
                        for (var i = 0; i < docIds.length; i++) {
                        
                            // create the publish request
                            var request =  new sforce.Xml("PublishRequest");
                            request.AttachmentId = docIds[i];
                            request.WorkspaceName = workspaceName;
                            request.TagValues = tagValues;
                            
                            // publish to content
                            cn_publishContentForAgreement(agreementId, request);
                        }
                        
                        // STEP III - perform after publish tasks
                        afterPublish(agreementId, docIds);
                        // STEP III - delete searchable attachments
                        //deleteAttachments(docIds);
                    }
                    
                    
                }
            
            } catch(ex) {
                // hide modal panel
                YAHOO.force.com.waitPanel.hide();
                // display the error
                erroralert(cERROR_UNKNOWN, ex);
                
            } finally {
                // back to the detail page
                // Check for navigation in Ligtning or Mobile
                var isLightningExperience = "{!isLightningUI}";

                if(isLightningExperience == 'true') {
                    if(hasLargeFile == 'true') {
                        openActivationAsyncModal();
                    } else {
                        // if console application, close the current tab and navigate to object
                        if (sforce.console.isInConsole()) {
                            // Refresh primary tab to show correct status 
                            refreshPrimaryTabById();
                            // close tab
                            closeTab();
                        } else {
                            redirectBackToAgreement();
                        }
                    }
                    
                } else {
                    navigateTo('{!IF(isCommunityUser, $Site.Prefix, "")}/'+agreementId);
                }
            }
                        
        }
        
    </script>
    <apex:form >
        <apex:slds />
        <body>
            <div id="divActivationMessage" style="display: none;">
                <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
                    <div class="slds-modal__container">
                        <header class="slds-modal__header">
                            <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick="return redirectBackToAgreement();">
                                <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#close"></use>
                                </svg>
                                <span class="slds-assistive-text">Close</span>
                            </button>
                            <h2 id="modal-heading-01" class="slds-modal__title slds-hyphenate"><b>{!$Label.Apttus__ActivateAgreement}</b></h2>
                        </header>
                        <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                            <p>{!$Label.AgreementActivateMessage}</p>
                        </div>
                        <footer class="slds-modal__footer">
                            <apex:commandButton onclick="return redirectBackToAgreement();" styleClass="slds-button slds-button_brand" value="OK" />
                        </footer>
                    </div>
                </section>
                <div class="slds-backdrop slds-backdrop_open"></div>
            </div>
        </body>
    </apex:form>
</apex:page>