/**
 * Created by amruthakommuri on 2019-08-19.
 */
@isTest
public with sharing class OpportunityReopenTest {
  //Defined test dataset
  @testSetup
  static void setupdata() {
    SBQQ.TriggerControl.disable();
    //create an account record
    Account accObj = TestDataFactory.createAccountUMR();

    Id pricebookId = Test.getStandardPricebookId();

    //create an opportunity record
    Opportunity oppObj2 = TestDataFactory.createOpportunity(accObj.Id);
    oppObj2.Pricebook2Id = pricebookId;
    oppObj2.Benefit_Consultant_Involved_in_Deal__c = 'NO';
    oppObj2.LeadSource = 'Sales';
    insert oppObj2;

    //Create a quote record
    SBQQ__Quote__c quoObj1 = TestDataFactory.createQuote(oppObj2.Id);
    insert quoObj1;

    list<Product2> prodlist = new List<Product2>();
    Product2 Prod1 = TestDataFactory.createSingleProduct(
      'TD Bundle - Standard',
      'Teladoc',
      'TD-STD'
    );
    prodlist.add(Prod1);

    //create Gen Med product
    Product2 prod2 = TestDataFactory.createSingleProduct(
      'General Medical',
      'General Medical',
      'GM'
    );
    prodlist.add(Prod2);

    //create Gen Med - Consult Fee product
    Product2 prod3 = TestDataFactory.createSingleProduct(
      'General Medical',
      'General Medical',
      'GM'
    );
    prodlist.add(Prod3);

    //create Derm product
    Product2 prod4 = TestDataFactory.createSingleProduct(
      'Dermatology',
      'Dermatology',
      'DERM'
    );
    prodlist.add(Prod4);

    //create Derm Fee/Visit product
    Product2 prod5 = TestDataFactory.createSingleProduct(
      'Derm Fee/Visit',
      'Dermatology',
      'DERMFEE'
    );
    prodlist.add(Prod5);

    //create Sexual Health product
    Product2 prod6 = TestDataFactory.createSingleProduct(
      'Sexual Health',
      'Sexual Health',
      'SH'
    );
    prodlist.add(Prod6);

    //create Tobacco Cessation product
    Product2 prod7 = TestDataFactory.createSingleProduct(
      'Tobacco Cessation',
      'Tobacco Cessation',
      'SH'
    );
    prodlist.add(Prod7);

    //create Tobacco Cessation product
    Product2 prod8 = TestDataFactory.createSingleProduct(
      'TC Program Cost',
      'Tobacco Cessation',
      'TCPROGFEE'
    );
    prodlist.add(Prod8);

    insert Prodlist;

    PricebookEntry pbEntry = TestDataFactory.createPriceBookEntries(
      new List<Product2>{ prod2 },
      pricebookId
    )[0];
    insert pbEntry;

    List<SBQQ__QuoteLine__c> quolineList = new List<SBQQ__QuoteLine__c>();

    //Create quotelines
    SBQQ__QuoteLine__c quoline1 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod1.Id
    );
    quoline1.SBQQ__Number__c = 1;
    quolineList.add(quoline1);

    SBQQ__QuoteLine__c quoline2 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod2.Id
    );
    quoline2.SBQQ__Number__c = 4;
    quolineList.add(quoline2);

    SBQQ__QuoteLine__c quoline3 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod3.Id
    );
    quoline3.SBQQ__Number__c = 5;
    quolineList.add(quoline3);

    SBQQ__QuoteLine__c quoline4 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod4.Id
    );
    quoline4.SBQQ__Number__c = 2;
    quolineList.add(quoline4);

    SBQQ__QuoteLine__c quoline5 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod5.Id
    );
    quoline5.SBQQ__Number__c = 3;
    quolineList.add(quoline5);

    SBQQ__QuoteLine__c quoline6 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod6.Id
    );
    quoline6.SBQQ__Number__c = 6;
    quolineList.add(quoline6);

    SBQQ__QuoteLine__c quoline7 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod7.Id
    );
    quoline7.SBQQ__Number__c = 7;
    quolineList.add(quoline7);

    SBQQ__QuoteLine__c quoline8 = TestDataFactory.createQuoteLine(
      quoObj1.Id,
      prod8.Id
    );
    quoline8.SBQQ__Number__c = 8;
    quolineList.add(quoline8);

    insert quolineList;

    //create a contract record 2
    Contract conObj2 = TestDataFactory.createContractNoInsert(
      accObj.Id,
      oppObj2.Id,
      null
    );
    conObj2.Status = 'Draft';
    conObj2.CurrencyIsoCode = 'USD';
    conObj2.StartDate = Date.Today();
    conObj2.ContractTerm = 12;
    insert conObj2;

    List<SBQQ__Subscription__c> subList = new List<SBQQ__Subscription__c>();

    //Create subscriptions

    //TD Bundle - standard
    subList = TestDataFactory.createSub(accObj.Id, conObj2.Id);

    List<Asset> assetList = new List<Asset>();

    //Create Assets

    Asset asset1 = TestDataFactory.createAssetNoInsert(
      'GM - Consult Fee',
      49,
      accObj.Id,
      null,
      prod3.Id,
      null
    );
    asset1.Quantity = 500;
    asset1.CurrencyIsoCode = 'USD';
    asset1.SBQQ__QuoteLine__c = quoline3.Id;
    assetList.add(asset1);

    Asset asset2 = TestDataFactory.createAssetNoInsert(
      'Derm Fee/Visit',
      75,
      accObj.Id,
      null,
      prod5.Id,
      null
    );
    asset2.Quantity = 500;
    asset2.CurrencyIsoCode = 'USD';
    asset2.SBQQ__QuoteLine__c = quoline5.Id;
    assetList.add(asset2);

    Asset asset3 = TestDataFactory.createAssetNoInsert(
      'TC Program Cost',
      150,
      accObj.Id,
      null,
      prod8.Id,
      null
    );
    asset3.Quantity = 500;
    asset3.CurrencyIsoCode = 'USD';
    asset3.SBQQ__QuoteLine__c = quoline8.Id;
    assetList.add(asset3);

    insert assetList;
    SBQQ.TriggerControl.enable();
  }

  @IsTest
  static void postiveTest() {
    SBQQ.TriggerControl.disable();
    Test.startTest();
    List<Opportunity> opplist = [SELECT id, Account.type FROM Opportunity];
    opplist[0].Contract_Service_Agreement_Status__c = 'N/A - Under Master Agreement';
    //opplist[0].Contract_Path__c = System.Label.TD_Teladoc_Account;
    opplist[0].StageName = 'Closed Won';
    opplist[0].Probability = 100;
    opplist[0].SBQQ__Contracted__c = true;
    opplist[0].Contracted_Date__c = Date.Today();

    update opplist;

    opplist[0].StageName = 'Proposal';
    opplist[0].Probability = 50;
    opplist[0].SBQQ__Contracted__c = false;
    opplist[0]
      .RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName()
      .get('Employer – Teladoc and HY Products')
      .getRecordTypeId();
    update opplist;

    ApexPages.StandardController stdc = new ApexPages.StandardController(
      opplist[0]
    );
    OpportunityReopencontroller opp = new OpportunityReopencontroller(stdc);

    PageReference pageRef = Page.OpportunityReopen;
    Test.setCurrentPage(pageRef);
    opp.saveOpp();
    opp.cancel();
    Test.stopTest();

    System.AssertEquals(false, opplist[0].SBQQ__Contracted__c);
    System.AssertEquals('Prospect', opplist[0].Account.type);
    SBQQ.TriggerControl.enable();
  }
 /*
  @IsTest
  static void negativeTest() {
    SBQQ.TriggerControl.disable();
    List<Opportunity> opplist = [SELECT id FROM Opportunity];

    Test.startTest();
    opplist[0].StageName = 'Proposal';
    opplist[0].Probability = 50;
    opplist[0].SBQQ__Contracted__c = false;
    opplist[0]
      .RecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName()
      .get('Employer – Teladoc and HY Products')
      .getRecordTypeId();

    ApexPages.StandardController stdc = new ApexPages.StandardController(
      opplist[0]
    );
    OpportunityReopencontroller opp = new OpportunityReopencontroller(stdc);

    PageReference pageRef = Page.OpportunityReopen;
    Test.setCurrentPage(pageRef);
    opp.saveOpp();

    Test.stopTest();

    try {
    } catch (Exception e) {
      Boolean expectedExceptionThrown = e.getMessage()
          .contains('Opportunity stage is not Closed Won or Contracting.')
        ? true
        : false;
      System.AssertEquals(expectedExceptionThrown, true);
    }
    SBQQ.TriggerControl.enable();
  }

  @isTest
  static void negativeTestNonSysAdmin() {
    SBQQ.TriggerControl.disable();
    test.startTest();

    Profile p = [SELECT Id FROM Profile WHERE Name = 'Sales Operations'];
    User u2 = new User(
      Alias = 'standt1',
      Country = 'United Kingdom',
      Email = 'demo1@teladochealth.com',
      EmailEncodingKey = 'UTF-8',
      LastName = 'Testing',
      LanguageLocaleKey = 'en_US',
      LocaleSidKey = 'en_US',
      ProfileId = p.Id,
      TimeZoneSidKey = 'America/Los_Angeles',
      UserName = 'testoppvalid2@teladochealth.com'
    );
    insert u2;
    List<Opportunity> opplist = [
      SELECT id, Account.Account_Sub_Type__c
      FROM Opportunity
    ];
      system.debug('Label==============>'+System.Label.TD_Teladoc_Account);
    //opplist[0].Contract_Path__c = System.Label.TD_Teladoc_Account;
    opplist[0].StageName = 'Closed Won';
    opplist[0].Probability = 100;
    opplist[0].SBQQ__Contracted__c = true;
    opplist[0].Contracted_Date__c = Date.Today();
    opplist[0].Contract_Service_Agreement_Status__c = 'N/A - Under Master Agreement';
    update opplist;

    System.runAs(u2) {
      ApexPages.StandardController stdc = new ApexPages.StandardController(
        opplist[0]
      );
      OpportunityReopencontroller opp = new OpportunityReopencontroller(stdc);
      PageReference pageRef = Page.OpportunityReopen;
      Test.setCurrentPage(pageRef);
    }
    try {
    } catch (Exception e) {
      Boolean expectedExceptionThrown = e.getMessage()
          .contains('Only System Administrator can re-open an opportunity')
        ? true
        : false;
      System.AssertEquals(true, expectedExceptionThrown);
    }
    test.stopTest();
    SBQQ.TriggerControl.enable();
  }
*/
}